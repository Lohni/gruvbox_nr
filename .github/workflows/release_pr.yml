# This workflow creates a PR that sets the project version/changelog to the specified values from the draft
# When this PR gets merged, the release workflow is called and releases the draft
name: Create release PR
on:
  workflow_dispatch:

jobs:
  draftInformation:
    name: Get Draft
    runs-on: ubuntu-latest
    outputs:
      draft_version: ${{ steps.properties.outputs.draft_version }}
      draft_changelog: ${{ steps.properties.outputs.draft_changelog }}
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Update release tag to version specified in title (vX.Y.Z)
      - name: Update Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          CURR_TAG="$(gh api repos/{owner}/{repo}/releases \
          --jq '.[] | select(.draft == true) | .tag_name')"
          
          TITLE_VERSION="$(gh api repos/{owner}/{repo}/releases \
          --jq '.[] | select(.draft == true) | .name' \
          | grep -Po 'v([\d.]{1,}){3}')"
          
          gh release edit $CURR_TAG --tag $TITLE_VERSION

      - name: Export Properties
        id: properties
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          DRAFT_VERSION="$(gh api repos/{owner}/{repo}/releases \
          --jq '.[] | select(.draft == true) | .tag_name' \
          | cut -c 2-6 )"
          
          DRAFT_CHANGELOG="$(gh api repos/{owner}/{repo}/releases \
          --jq '.[] | select(.draft == true) | .body')"
          
          echo "draft_version=$DRAFT_VERSION" >> $GITHUB_OUTPUT
          
          {
            echo "draft_changelog<<EOF"
            echo "$DRAFT_CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

  # Create a pull request that sets the version/changelog to the values specified in the release draft
  createPR:
    name: Create PR
    runs-on: ubuntu-latest
    needs: [draftInformation]
    permissions:
      contents: write
      pull-requests: write
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true

      # Calls custom gradle task to set the project version in build.gradle
      - name: Patch Version
        if: ${{ needs.draftInformation.outputs.draft_version != '' }}
        env:
          VERSION: ${{ needs.draftInformation.outputs.draft_version }}
        run: ./gradlew patchVersion -PnewVersion="$VERSION"

      # Calls gradle task to set the changlog specified in the release draft
      - name: Patch Changelog
        if: ${{ needs.draftInformation.outputs.draft_changelog != '' }}
        env:
          CHANGELOG: ${{ needs.draftInformation.outputs.draft_changelog }}
        run: ./gradlew patchChangelog --release-note="$CHANGELOG" -PrepositoryUrl="${{ github.server_url }}/${{ github.repository }}"

      # Build
      - name: Build
        run: ./gradlew build

      # Create a pull request
      - name: Create Pull Request
        if: ${{ needs.draftInformation.outputs.draft_changelog != '' && needs.draftInformation.outputs.draft_version != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.draftInformation.outputs.draft_version }}
        run: |
          BRANCH="release-$VERSION"
          LABEL="release"

          git config user.email "action@github.com"
          git config user.name "GitHub Action"

          git checkout -b $BRANCH
          git commit -am "Release v$VERSION"
          git push --set-upstream origin $BRANCH
          
          gh label create "$LABEL" \
            --description "Pull requests with new release version and changelog" \
            --force \
            || true

          gh pr create \
            --title "Release - \`v$VERSION\`" \
            --body "Current pull request contains patched \`CHANGELOG.md\` file for the \`$VERSION\` version." \
            --label "$LABEL" \
            --head $BRANCH